server:
  port: 8083
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/rrs-waitque
      client:
        registration:
          customer-service:
            client-id: customer-service
            client-secret: ${CUSTOMER_SERVICE_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            provider: keycloak
        provider:
          keycloak:
            token-uri: http://localhost:8080/realms/rrs-waitque/protocol/openid-connect/token
  datasource:
    url: jdbc:postgresql://localhost:5432/waitque
    username: waitque_api
    password: ${WAITQUE_DB_PASSWORD:}
    jpa:
      hibernate:
        ddl-auto: validate # or validate / create-drop (dev only)
      properties:
        hibernate:
          dialect: org.hibernate.dialect.PostgreSQLDialect
          default_schema: customer
          format_sql: true
logging:
  level:
    org.springframework.security: INFO
    com.rrsgroup: DEBUG
    org.hibernate:
      SQL: DEBUG
      type:
        descriptor:
          sql:
            BasicBinder: TRACE
    orm.jdbc.bind: TRACE
---
spring:
  profiles:
    active: dev
---
spring:
  config:
    activate:
      on-profile: dev
microservices:
  company-service:
    base-url: http://localhost:8082
logging:
  level:
    org.hibernate:
      SQL: DEBUG
    type:
      descriptor:
        sql:
          BasicBinder: TRACE
---
spring:
  config:
    activate:
      on-profile: k8s

  datasource:
    url: jdbc:postgresql://postgres:5432/waitque
    username: waitque_api
    password: ${WAITQUE_DB_PASSWORD:}
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: customer

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/rrs-waitque
      client:
        registration:
          company-service:
            client-id: customer-service
            client-secret: ${CUSTOMER_SERVICE_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            provider: keycloak
        provider:
          keycloak:
            token-uri: http://keycloak:8080/realms/rrs-waitque/protocol/openid-connect/token

microservices:
  company-service:
    base-url: http://company-service:8082